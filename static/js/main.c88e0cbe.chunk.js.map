{"version":3,"sources":["context/ThemeContext.js","components/card/InfoCard.js","components/card/Cards.js","utils/accuWeather.js","components/spinner/Spinner.js","App.js","serviceWorker.js","index.js","img/sunrise.jpg","img/sunset.jpg"],"names":["ThemeContext","createContext","ThemeContextProvider","props","useState","dark","setDark","themeObj","fg","bg","cb","Provider","value","toggleDarkMode","children","InfoCard","data","title","unit","img","color","useContext","headStyle","background","border","style","width","margin","padding","backgroundPosition","backgroundSize","backgroundRepeat","hoverable","className","id","Cards","type","justify","span","temperatureLow","message","description","summary","showIcon","temperatureHigh","marginTop","marginBottom","Date","sunriseTime","toLocaleTimeString","sunrise","sunsetTime","sunset","pressure","humidity","parseFloat","windSpeed","toFixed","url","getCurrentWeatherDataByGeo","lat","lon","axios","get","params","units","exclude","override","css","Spinner","sizeUnit","size","loading","TabPane","Tabs","App","setError","weather","setWeather","days","useEffect","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","then","catch","error","console","onChange","currently","temperature","animated","tabBarStyle","daily","map","day","idx","currentDay","time","getDay","tab","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.c88e0cbe.chunk.js","sourcesContent":["import React, { createContext, useState } from \"react\";\r\n\r\nexport const ThemeContext = createContext();\r\n\r\nconst ThemeContextProvider = props => {\r\n  let [dark, setDark] = useState(false);\r\n\r\n  let lightTheme = {\r\n    fg: \"#2f3542\",\r\n    bg: \"#FFF\",\r\n    cb: \"rgba(248, 248, 255, 0.85) none repeat scroll 0% 0%\"\r\n  };\r\n  let darkTheme = {\r\n    fg: \"#f1f2f6\",\r\n    bg: \"#2f3542\",\r\n    cb: \"#34495e\"\r\n  };\r\n\r\n  let themeObj = dark ? darkTheme : lightTheme;\r\n\r\n  let toggleDarkMode = () => {\r\n    setDark(!dark);\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ themeObj, toggleDarkMode, dark }}>\r\n      {props.children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ThemeContextProvider;\r\n","import React, { useContext } from \"react\";\r\nimport { Card } from \"antd\";\r\n\r\nimport { ThemeContext } from \"../../context/ThemeContext\";\r\n\r\nconst InfoCard = ({ data, title, unit, img, color }) => {\r\n  const { themeObj } = useContext(ThemeContext);\r\n\r\n  return (\r\n    <div>\r\n      <Card\r\n        title={title}\r\n        headStyle={{\r\n          color: themeObj.fg,\r\n          background: \"transparent\",\r\n          border: \"none\"\r\n        }}\r\n        style={{\r\n          border: \"none\",\r\n          width: \"100%\",\r\n          margin: \"auto\",\r\n          padding: 0,\r\n          background: themeObj.cb,\r\n          color: themeObj.fg,\r\n          backgroundPosition: \"center\",\r\n          backgroundSize: \"cover\",\r\n          backgroundRepeat: \"no-repeat\"\r\n        }}\r\n        hoverable={true}\r\n      >\r\n        <h1 className=\"card-description\" style={{ color: themeObj.fg }}>\r\n          {data} <span id=\"unit\">{unit}</span>\r\n        </h1>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InfoCard;\r\n","import React, { useContext } from \"react\";\r\nimport { Row, Col, Card } from \"antd\";\r\nimport { Alert } from \"antd\";\r\n\r\nimport sunrise from \"../../img/sunrise.jpg\";\r\nimport sunset from \"../../img/sunset.jpg\";\r\nimport InfoCard from \"./InfoCard\";\r\n\r\nconst Cards = ({ data }) => {\r\n  return (\r\n    <div id=\"cards\">\r\n      <Row type=\"flex\" justify=\"space-between\">\r\n        <Col span={7}>\r\n          {\" \"}\r\n          <InfoCard\r\n            data={data.temperatureLow}\r\n            title=\"Minimum Temperature\"\r\n            unit=\"&#8451;\"\r\n          />\r\n        </Col>\r\n        <Col span={7}>\r\n          <Alert\r\n            message=\"Summary\"\r\n            description={data.summary}\r\n            type=\"info\"\r\n            showIcon\r\n          />\r\n        </Col>\r\n        <Col span={7}>\r\n          {\" \"}\r\n          <InfoCard\r\n            data={data.temperatureHigh}\r\n            title=\"Maximum Temperature\"\r\n            unit=\"&#8451;\"\r\n          />\r\n        </Col>\r\n      </Row>\r\n\r\n      <Row\r\n        type=\"flex\"\r\n        justify=\"space-between\"\r\n        style={{ marginTop: 35, marginBottom: 35 }}\r\n      >\r\n        <Col span={11}>\r\n          <InfoCard\r\n            data={new Date(data.sunriseTime * 1000).toLocaleTimeString()}\r\n            title=\"Sunrise\"\r\n            img={sunrise}\r\n          />\r\n        </Col>\r\n        <Col span={11}>\r\n          <InfoCard\r\n            data={new Date(data.sunsetTime * 1000).toLocaleTimeString()}\r\n            title=\"Sunset\"\r\n            img={sunset}\r\n          />\r\n        </Col>\r\n      </Row>\r\n\r\n      <Row\r\n        type=\"flex\"\r\n        justify=\"space-between\"\r\n        style={{ marginTop: 15, marginBottom: 15 }}\r\n      >\r\n        <Col span={7}>\r\n          {\" \"}\r\n          <InfoCard data={data.pressure} unit=\"mBar\" title=\"Pressure\" />\r\n        </Col>\r\n        <Col span={7}>\r\n          <InfoCard data={data.humidity} unit=\"%\" title=\"Humidity\" />\r\n        </Col>\r\n        <Col span={7}>\r\n          {\" \"}\r\n          <InfoCard\r\n            data={parseFloat(data.windSpeed * 3.6).toFixed(2)}\r\n            title=\"Wind Speed\"\r\n            unit=\"km/h\"\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n\r\n//3\r\n// VM1248:1 4\r\n// VM1248:1 5\r\n// VM1248:1 6\r\n// VM1248:1 0 sun\r\n// VM1248:1 1\r\n// VM1248:1 2\r\n// VM1248:1 3\r\n","import axios from \"axios\";\r\n\r\nexport const apiKey = \"9e4abad239d860aabb5db77e39b26ab1\";\r\nexport const url = `https://api.darksky.net/forecast/${apiKey}`;\r\n\r\nexport const getCurrentWeatherDataByGeo = (lat, lon) => {\r\n  return axios.get(`https://cors-anywhere.herokuapp.com/${url}/${lat},${lon}`, {\r\n    params: { units: \"si\", exclude: \"minutely,hourly\" }\r\n  });\r\n};\r\n","import React from \"react\";\r\nimport { css } from \"@emotion/core\";\r\n// First way to import\r\n// Another way to import. This is recommended to reduce bundle size\r\nimport ClimbingBoxLoader from \"react-spinners/ClimbingBoxLoader\";\r\n\r\nconst override = css`\r\n  position: absolute;\r\n  margin: 0 auto;\r\n  border-color: red;\r\n  height: 100px;\r\n  width: 100px;\r\n  left: 50%;\r\n  margin-left: -50px;\r\n  top: 50%;\r\n  margin-top: -50px;\r\n`;\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"sweet-loading\">\r\n      <ClimbingBoxLoader\r\n        css={override}\r\n        sizeUnit={\"px\"}\r\n        size={50}\r\n        color={\"#03A9F4\"}\r\n        loading={true}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { useEffect, useState, useContext } from \"react\";\nimport { Tabs } from \"antd\";\nimport { Slider, Switch } from \"antd\";\n\nimport Cards from \"./components/card/Cards\";\nimport { getCurrentWeatherDataByGeo } from \"./utils/accuWeather\";\nimport Spinner from \"./components/spinner/Spinner\";\nimport { ThemeContext } from \"./context/ThemeContext\";\n\nconst { TabPane } = Tabs;\n\nfunction App() {\n  let [error, setError] = useState(\"\");\n  let [weather, setWeather] = useState(null);\n  const days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\"\n  ];\n\n  const { dark, themeObj, toggleDarkMode } = useContext(ThemeContext);\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(pos => {\n        getCurrentWeatherDataByGeo(pos.coords.latitude, pos.coords.longitude)\n          .then(data => {\n            setWeather(data.data);\n          })\n          .catch(error => {\n            setError(error);\n            console.error(error);\n          });\n      });\n    } else {\n      setError(\"Please Allow the location service first\");\n    }\n  }, []);\n\n  return (\n    <div\n      id=\"App-Wrapper\"\n      style={{\n        background: themeObj.bg,\n        color: themeObj.fg\n      }}\n    >\n      <div className=\"App\">\n        <div>\n          {/* <span>Enable Dark Mode</span> */}\n          <Switch className=\"themeSlider\" onChange={toggleDarkMode} />\n        </div>\n        {weather ? (\n          <>\n            <div className=\"current-container\">\n              <h5 className=\"current-title\" style={{ color: themeObj.fg }}>\n                Current Temperature\n              </h5>\n              <h1 className=\"current-temp\" style={{ color: themeObj.fg }}>\n                {weather.currently.temperature}\n                <span style={{ padding: \"5px\", color: themeObj.fg }}>\n                  &#8451;\n                </span>\n              </h1>\n            </div>\n\n            <div className=\"card-container\">\n              <Tabs\n                type=\"card\"\n                animated={true}\n                tabBarStyle={{\n                  color: themeObj.fg,\n                  background: themeObj.bg,\n                  border: \"none\"\n                }}\n              >\n                {weather.daily.data.map((day, idx) => {\n                  let currentDay = new Date(day.time * 1000).getDay();\n                  return (\n                    <TabPane\n                      tab={idx === 0 ? \"Today\" : days[currentDay]}\n                      key={idx}\n                      style={{ background: themeObj.bg }}\n                    >\n                      <Cards data={day} />\n                    </TabPane>\n                  );\n                })}\n              </Tabs>\n            </div>\n          </>\n        ) : (\n          <Spinner />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport ThemeContextProvider from \"./context/ThemeContext\";\n\nReactDOM.render(\n  <ThemeContextProvider>\n    <App />\n  </ThemeContextProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/sunrise.e95d7057.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sunset.397c20e3.jpg\";"],"sourceRoot":""}